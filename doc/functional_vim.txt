*functional.vim*
A library of vimscript wrapper functions, to facilitate a more functional style.


Map(Funcref, list)                                      *Map()*
            Return a copy of list, with Funcref applied to each element

            Example 1:

                Map({i -> 2*i}, [1,2,3])
                    " returns [2,4,6]

            Example 2:

                function! Double(i) abort
                    return 2*a:i
                endfunction
                Map(function('Double', [1,2,3])
                    " returns [2,4,6]

Reduce(Funcref, list)                                   *Reduce()*
            Return the result of a reduction operation applied to a list.

            Examples:  

                Reduce({i, j -> i + j}, [1,2,3])
                    " returns 6

                Reduce({i, j -> i . j}, ['hello ', 'world']
                    " returns 'hello world'

Filter(Funcref, li)                                     *Filter()*
            Return a list of only those elements for which Funcref(element) == 1 

            Examples:

                Filter({i -> i > 1}, [1,2,3])
                    " returns [2,3]
                
                Filter(function("Some_func"), [1,2,3])
                    " returns a list of values for which Some_func(value) == 1

Zip(...)                                                *Zip()*
            Return a list of tuples assembled from lists of the same size.
            
            Example: 

                Zip([1,2,3], ['a','b','c'])
                    " returns [[1,'a'],[2, 'b'],[3, 'c']]

Unzip(zipped_list)                                      *Unzip()*
            Return list of unzipped lists.
 
            Example: 

                Unzip([[1,'a'],[2,'b'],[3,'c']])
                    " returns [[1,2,3], ['a','b','c']]

Sorted(list, kwargs = {'key':{i -> i}, 'reverse':0})    *Sorted()*

            Return a sorted list, sorted according to the order of corresponding list Map(kwargs['key'], li)
            Defaults to sorting in ascending order.

            Examples:

                Sorted([2,1,3])
                    "returns [1,2,3]

                Sorted([2,1,-3], {'key':{i -> abs(i)}, 'reverse':1})
                    "returns [-3,2,1]

                Sorted([2,1,3], {'key':function("Some_func")})

In(value, li)                                           *In()*
            Return 1 if value in list, li: Else return 0
            
            Example:
                In(4, [1,2,3])
                    " returns 0

